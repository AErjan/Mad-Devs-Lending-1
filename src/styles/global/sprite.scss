// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$design-name: 'design';
$design-x: 0px;
$design-y: 0px;
$design-offset-x: 0px;
$design-offset-y: 0px;
$design-width: 48px;
$design-height: 48px;
$design-total-width: 96px;
$design-total-height: 96px;
$design-image: '../images/sprite.png';
$design: (0px, 0px, 0px, 0px, 48px, 48px, 96px, 96px, '../images/sprite.png', 'design', );
$display-name: 'display';
$display-x: 48px;
$display-y: 48px;
$display-offset-x: -48px;
$display-offset-y: -48px;
$display-width: 30px;
$display-height: 48px;
$display-total-width: 96px;
$display-total-height: 96px;
$display-image: '../images/sprite.png';
$display: (48px, 48px, -48px, -48px, 30px, 48px, 96px, 96px, '../images/sprite.png', 'display', );
$setup-name: 'setup';
$setup-x: 48px;
$setup-y: 0px;
$setup-offset-x: -48px;
$setup-offset-y: 0px;
$setup-width: 48px;
$setup-height: 48px;
$setup-total-width: 96px;
$setup-total-height: 96px;
$setup-image: '../images/sprite.png';
$setup: (48px, 0px, -48px, 0px, 48px, 48px, 96px, 96px, '../images/sprite.png', 'setup', );
$time-name: 'time';
$time-x: 0px;
$time-y: 48px;
$time-offset-x: 0px;
$time-offset-y: -48px;
$time-width: 48px;
$time-height: 48px;
$time-total-width: 96px;
$time-total-height: 96px;
$time-image: '../images/sprite.png';
$time: (0px, 48px, 0px, -48px, 48px, 48px, 96px, 96px, '../images/sprite.png', 'time', );
$spritesheet-width: 96px;
$spritesheet-height: 96px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($design, $display, $setup, $time, );
$spritesheet: (96px, 96px, '../images/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
